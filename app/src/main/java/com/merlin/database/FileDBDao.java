package com.merlin.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_DB".
*/
public class FileDBDao extends AbstractDao<FileDB, Long> {

    public static final String TABLENAME = "FILE_DB";

    /**
     * Properties of entity FileDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property Md5 = new Property(2, String.class, "md5", false, "MD5");
        public final static Property CreateTime = new Property(3, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Image = new Property(4, byte[].class, "image", false, "IMAGE");
    }


    public FileDBDao(DaoConfig config) {
        super(config);
    }
    
    public FileDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PATH\" TEXT NOT NULL UNIQUE ," + // 1: path
                "\"MD5\" TEXT NOT NULL ," + // 2: md5
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 3: createTime
                "\"IMAGE\" BLOB);"); // 4: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPath());
        stmt.bindString(3, entity.getMd5());
        stmt.bindLong(4, entity.getCreateTime());
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(5, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPath());
        stmt.bindString(3, entity.getMd5());
        stmt.bindLong(4, entity.getCreateTime());
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(5, image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileDB readEntity(Cursor cursor, int offset) {
        FileDB entity = new FileDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // path
            cursor.getString(offset + 2), // md5
            cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPath(cursor.getString(offset + 1));
        entity.setMd5(cursor.getString(offset + 2));
        entity.setCreateTime(cursor.getLong(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
