package com.merlin.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.merlin.media.Media;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIA".
*/
public class MediaDao extends AbstractDao<Media, Long> {

    public static final String TABLENAME = "MEDIA";

    /**
     * Properties of entity Media.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "id");
        public final static Property MediaId = new Property(1, long.class, "mediaId", false, "mediaId");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Path = new Property(3, String.class, "path", false, "path");
        public final static Property Md5 = new Property(4, String.class, "md5", false, "md5");
        public final static Property Url = new Property(5, String.class, "url", false, "url");
        public final static Property Account = new Property(6, String.class, "account", false, "account");
        public final static Property Album = new Property(7, String.class, "album", false, "album");
        public final static Property Artist = new Property(8, String.class, "artist", false, "artist");
        public final static Property Duration = new Property(9, long.class, "duration", false, "duration");
    }


    public MediaDao(DaoConfig config) {
        super(config);
    }
    
    public MediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIA\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"mediaId\" INTEGER NOT NULL ," + // 1: mediaId
                "\"name\" TEXT NOT NULL ," + // 2: name
                "\"path\" TEXT NOT NULL ," + // 3: path
                "\"md5\" TEXT," + // 4: md5
                "\"url\" TEXT," + // 5: url
                "\"account\" TEXT," + // 6: account
                "\"album\" TEXT," + // 7: album
                "\"artist\" TEXT," + // 8: artist
                "\"duration\" INTEGER NOT NULL );"); // 9: duration
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MEDIA_path ON \"MEDIA\"" +
                " (\"path\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Media entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getMediaId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getPath());
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(5, md5);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(7, account);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(8, album);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(9, artist);
        }
        stmt.bindLong(10, entity.getDuration());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Media entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getMediaId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getPath());
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(5, md5);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(7, account);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(8, album);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(9, artist);
        }
        stmt.bindLong(10, entity.getDuration());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Media readEntity(Cursor cursor, int offset) {
        Media entity = new Media( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // mediaId
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // md5
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // account
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // album
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // artist
            cursor.getLong(offset + 9) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Media entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMediaId(cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setPath(cursor.getString(offset + 3));
        entity.setMd5(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlbum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArtist(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDuration(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Media entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Media entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Media entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
